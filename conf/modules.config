/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//Trimming
params.minlength=75
params.windowsize=4
params.qualitytrimscore=30
params.savetrimmedreads=false

includeConfig 'docker_containers.config'

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PREPROCESS {
        publishDir = [
            path: { "${params.outdir}/logs/preprocess"}, 
                mode: params.publish_dir_mode, 
                pattern:"*.gz"]
        ext.args = '--quiet'
    }

    withName: TRIMM {
        container = trimmomatic_container
        publishDir = [
            path: { "${params.outdir}/logs/trimmed" }, 
                mode: params.publish_dir_mode, 
                pattern: "*.fastq.gz"
        ]
    }

    withName: CLEANREADS {
        container = bbtools_container
        publishDir = [
            [path: { "${params.outdir}/logs/cleanedreads/stats"}, 
                mode: params.publish_dir_mode, 
                pattern:"*.stats.txt"],
            [path: { "${params.outdir}/logs/cleanedreads/reads"}, 
                mode: params.publish_dir_mode,
                pattern:"*.fastq.gz"]
        ]
    }

    withName: SAM_FILES {
        container = minimap2_container
        publishDir = [
            path: { "${params.outdir}/logs/sam_files"},
                mode: params.publish_dir_mode,
                pattern:"*"
        ]

    }

    withName: SHOVILL {
        container = shovill_container
        publishDir = [
            path: {"${params.outdir}/logs/assemblies"},
                mode: params.publish_dir_mode,
                pattern:"*.fasta"
        ]
    }

    withName: QUAST {
        publishDir = [
            path: {"${params.outdir}/logs/quast"},
                mode: params.publish_dir_mode,
                pattern:"*.tsv"
        ]
    }

    withName: CENTROID {
        container = centroid_container
        publishDir = [
            path: { "${params.outdir}/"},
                mode: params.publish_dir_mode,
                pattern:"*.fasta"
        ]
    }

    withName: REFERENCE_MAPPING {
        container = samtools_container
        publishDir = [
            path: { "${params.outdir}/logs/sam_files"},
                mode: params.publish_dir_mode,
                pattern:"*"
        ]
    }

    withName: FASTQC {
        container = 'staphb/fastqc:0.11.8'
        publishDir = 
            [path: { "${params.outdir}/logs/fastqc"},
                mode: params.publish_dir_mode,
                pattern:"*_fastqc.{zip,html}"]
    }

    withName: MULTIQC {
        publishDir = [
            [path: {"${params.outdir}/logs/multiqc"},
                mode: params.publish_dir_mode,
                pattern:"*"],
            [path: {"${params.outdir}/"},
                mode: params.publish_dir_mode,
                pattern:"*.html"]
        ]
    }

    withName: GENERATE_REPORT {
        publishDir = [
            path: { "${params.outdir}/logs/generate_report"}, 
                mode: params.publish_dir_mode, 
                pattern:"*"]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
